/**DEPRECATED**/
@import url("https://fonts.googleapis.com/css?family=Anton");
@import url("https://fonts.googleapis.com/css?family=Open+Sans");
@import url("https://fonts.googleapis.com/css?family=Bangers");
@import url("https://fonts.googleapis.com/css?family=Anton");
@import url("https://fonts.googleapis.com/css?family=Open+Sans");
@import url("https://fonts.googleapis.com/css?family=Bangers");
@font-face {
  font-family: 'Ailerons';
  src: url("../fonts/Ailerons-Typeface.otf"); }

@font-face {
  font-family: 'Ailerons';
  src: url("../fonts/Ailerons-Typeface.otf"); }

.container-fluid {
  padding: 0; }

/*.jumbotron{
  height: 100vh;
  background-color: transparent;
  h1 {
    @include center-vertically();
    span {
      font-family: $ailerons;
      color: $main-color;
    }
    font-family: "Anton", sans-serif;
  }

}*/
#intro-card {
  text-align: center; }
  #intro-card h1 {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    font-family: "Anton", sans-serif; }
    #intro-card h1 span {
      font-size: 1.9em;
      font-family: "Ailerons", sans-serif;
      color: #00546f; }

#main {
  padding-left: 2em;
  padding-right: 2em; }

.section-card {
  font-family: "Open Sans", serif;
  position: relative;
  height: 100vh;
  border: 1px solid red; }
  .section-card .content {
    margin: 0 auto; }
  .section-card .bg-card {
    background: #ff00ff;
    width: 60%;
    position: absolute;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%); }
  .section-card .fg-card img {
    max-width: 100%; }

.super-cool-background {
  height: 100vh;
  background: linear-gradient(45deg, #FFFF33, #FFFFCC); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfZm9udHMuc2NzcyIsIl92YXJpYWJsZXMuc2NzcyIsIl9jdXN0b20tbWl4aW5zLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqREVQUkVDQVRFRCoqL1xuXG5AaW1wb3J0ICdmb250cyc7XG5AaW1wb3J0ICd2YXJpYWJsZXMnO1xuQGltcG9ydCAnY3VzdG9tLW1peGlucyc7XG4uY29udGFpbmVyLWZsdWlke3BhZGRpbmc6IDA7fVxuLyouanVtYm90cm9ue1xuICBoZWlnaHQ6IDEwMHZoO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgaDEge1xuICAgIEBpbmNsdWRlIGNlbnRlci12ZXJ0aWNhbGx5KCk7XG4gICAgc3BhbiB7XG4gICAgICBmb250LWZhbWlseTogJGFpbGVyb25zO1xuICAgICAgY29sb3I6ICRtYWluLWNvbG9yO1xuICAgIH1cbiAgICBmb250LWZhbWlseTogXCJBbnRvblwiLCBzYW5zLXNlcmlmO1xuICB9XG5cbn0qL1xuI2ludHJvLWNhcmR7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgaDF7XG4gICAgQGluY2x1ZGUgY2VudGVyLWNvbXBsZXRlbHkoKTtcbiAgICBmb250LWZhbWlseTogJGFudG9uO1xuICAgIHNwYW57XG4gICAgICBmb250LXNpemU6IDEuOWVtO1xuICAgICAgZm9udC1mYW1pbHk6ICRhaWxlcm9ucztcbiAgICAgIGNvbG9yOiAkbWFpbi1jb2xvcjtcbiAgICB9XG4gIH1cbn1cbiNtYWlue1xuICBwYWRkaW5nLWxlZnQ6IDJlbTtcbiAgcGFkZGluZy1yaWdodDogMmVtO1xufVxuLnNlY3Rpb24tY2FyZHtcbiAgZm9udC1mYW1pbHk6ICRvcGVuLXNhbnM7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAkc2VjdGlvbi1oZWlnaHQ7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgLnJvd3tcbiAgICAvL3Bvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAvL3RvcDogNTAlO1xuICAgIC8vLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgLy8tbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAvLy1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgLy8tby10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgLy90cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIH1cbiAgLmNvbnRlbnQge1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5iZy1jYXJke1xuICAgIGJhY2tncm91bmQ6ICNmZjAwZmY7XG4gICAgd2lkdGg6IDYwJTtcbiAgICBAaW5jbHVkZSBjZW50ZXItaG9yaXpvbnRhbGx5KCk7XG4gIH1cbiAgLmZnLWNhcmR7XG4gICAgaW1ne1xuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIH1cbiAgfVxufVxuXG4uc3VwZXItY29vbC1iYWNrZ3JvdW5ke1xuICBoZWlnaHQ6IDEwMHZoO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYigyNTUsIDE5NSwgMTQxKSwgcmdiKDIyMCwgMTUwLCAxNTgpKTtcbn1cbiIsIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QW50b24nKTtcbkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zJyk7XG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUJhbmdlcnMnKTtcblxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdBaWxlcm9ucyc7XG4gIC8vc3JjOiB1cmwoXCIvYXBwL2ZvbnRzL0FpbGVyb25zLVR5cGVmYWNlLm90ZlwiKTtcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9BaWxlcm9ucy1UeXBlZmFjZS5vdGZcIik7XG59XG5cbiIsIiRtYWluLWNvbG9yOiAjMDA1NDZmO1xuJGJsdWUtZ3JhZGllbnQ6IGxpbmVhci1ncmFkaWVudCgtNDVkZWcsIHJnYig1MCwxNjgsMjExKSwgcmdiKDAsIDgzLCAyMDYpKTtcbiRncmVlbi1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2IoMCwgMjU1LCAxNzUpLCByZ2IoMCwgMTYzLCA0MikpO1xuJHB1cnBsZS1ncmFkaWVudDpsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCByZ2IoMTE3LCAwLCAyNTUpLCByZ2IoMjI0LCA2NCwgMjUxKSk7XG4kcmVkLWdyYWRpZW50OmxpbmVhci1ncmFkaWVudCg0NWRlZywgcmdiKDI0MSwgOTgsIDApLCByZ2IoMjU1LCAwLCA5MykpO1xuJGZhbmN5LWJnLTE6bGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2IoOTIsIDIzOCwgMTA0KSwgcmdiKDIyOSwgMTk0LCAwKSk7XG4kZmFuY3ktYmctMjpsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYigwLCAxMTcsIDE1NSksIHJnYigxNjcsIDQ2LCAxMzkpKTtcblxuXG4kYWlsZXJvbnM6IFwiQWlsZXJvbnNcIiwgc2Fucy1zZXJpZjtcbiRhbnRvbjogXCJBbnRvblwiLCBzYW5zLXNlcmlmO1xuJG9wZW4tc2FuczogXCJPcGVuIFNhbnNcIiwgc2VyaWY7XG4kc2VjdGlvbi1oZWlnaHQ6IDEwMHZoO1xuJGJhbmdlcnM6ICdCYW5nZXJzJywgY3Vyc2l2ZTtcbiIsIkBpbXBvcnQgJ2ZvbnRzJztcbkBpbXBvcnQgXCJ2YXJpYWJsZXNcIjtcbkBtaXhpbiBjZW50ZXItY29tcGxldGVseSgpe1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xufVxuQG1peGluIGNlbnRlci1ob3Jpem9udGFsbHkoKXtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiA1MCU7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG59XG5AbWl4aW4gY2VudGVyLXZlcnRpY2FsbHkoKXtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cbkBtaXhpbiBtYWtlLWhlYWRlcigkZm9udC1zaXplKSB7XG4gIGZvbnQtZmFtaWx5OiAkYW50b247XG4gIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZTtcblxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0I7QUNBaEIsT0FBTyxDQUFDLG9EQUFJO0FBQ1osT0FBTyxDQUFDLHdEQUFJO0FBQ1osT0FBTyxDQUFDLHNEQUFJO0FBRlosT0FBTyxDQUFDLG9EQUFJO0FBQ1osT0FBTyxDQUFDLHdEQUFJO0FBQ1osT0FBTyxDQUFDLHNEQUFJO0FBR1osVUFBVTtFQUNSLFdBQVcsRUFBRSxVQUFVO0VBRXZCLEdBQUcsRUFBRSxxQ0FBcUM7O0FBSDVDLFVBQVU7RUFDUixXQUFXLEVBQUUsVUFBVTtFQUV2QixHQUFHLEVBQUUscUNBQXFDOztBREg1QyxBQUFBLGdCQUFnQixDQUFBO0VBQUMsT0FBTyxFQUFFLENBQUMsR0FBRzs7QUFDOUI7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsQUFBQSxXQUFXLENBQUE7RUFDVCxVQUFVLEVBQUUsTUFBTSxHQVVuQjtFQVhELEFBRUUsV0FGUyxDQUVULEVBQUUsQ0FBQTtJR2xCRixRQUFRLEVBQUUsUUFBUTtJQUNsQixHQUFHLEVBQUUsR0FBRztJQUNSLElBQUksRUFBRSxHQUFHO0lBQ1QsaUJBQWlCLEVBQUUscUJBQXFCO0lBQ3hDLGNBQWMsRUFBRSxxQkFBcUI7SUFDckMsYUFBYSxFQUFFLHFCQUFxQjtJQUNwQyxZQUFZLEVBQUUscUJBQXFCO0lBQ25DLFNBQVMsRUFBRSxxQkFBcUI7SUhhOUIsV0FBVyxFRWJQLE9BQU8sRUFBRSxVQUFVLEdGbUJ4QjtJQVZILEFBS0ksV0FMTyxDQUVULEVBQUUsQ0FHQSxJQUFJLENBQUE7TUFDRixTQUFTLEVBQUUsS0FBSztNQUNoQixXQUFXLEVFakJOLFVBQVUsRUFBRSxVQUFVO01Ga0IzQixLQUFLLEVFM0JFLE9BQU8sR0Y0QmY7O0FBR0wsQUFBQSxLQUFLLENBQUE7RUFDSCxZQUFZLEVBQUUsR0FBRztFQUNqQixhQUFhLEVBQUUsR0FBRyxHQUNuQjs7QUFDRCxBQUFBLGFBQWEsQ0FBQTtFQUNYLFdBQVcsRUV6QkQsV0FBVyxFQUFFLEtBQUs7RUYwQjVCLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLE1BQU0sRUUxQlMsS0FBSztFRjJCcEIsTUFBTSxFQUFFLGFBQWEsR0F1QnRCO0VBM0JELEFBY0UsYUFkVyxDQWNYLFFBQVEsQ0FBQztJQUNQLE1BQU0sRUFBRSxNQUFNLEdBQ2Y7RUFoQkgsQUFpQkUsYUFqQlcsQ0FpQlgsUUFBUSxDQUFBO0lBQ04sVUFBVSxFQUFFLE9BQU87SUFDbkIsS0FBSyxFQUFFLEdBQUc7SUd6Q1osUUFBUSxFQUFFLFFBQVE7SUFDbEIsSUFBSSxFQUFFLEdBQUc7SUFDVCxpQkFBaUIsRUFBRSxnQkFBZ0I7SUFDbkMsY0FBYyxFQUFFLGdCQUFnQjtJQUNoQyxhQUFhLEVBQUUsZ0JBQWdCO0lBQy9CLFlBQVksRUFBRSxnQkFBZ0I7SUFDOUIsU0FBUyxFQUFFLGdCQUFnQixHSHFDMUI7RUFyQkgsQUF1QkksYUF2QlMsQ0FzQlgsUUFBUSxDQUNOLEdBQUcsQ0FBQTtJQUNELFNBQVMsRUFBRSxJQUFJLEdBQ2hCOztBQUlMLEFBQUEsc0JBQXNCLENBQUE7RUFDcEIsTUFBTSxFQUFFLEtBQUs7RUFDYixVQUFVLEVBQUUsd0NBQThELEdBQzNFIn0= */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
